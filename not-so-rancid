#!/usr/bin/env python3
"""

Homepage and documentation: https://github.com/llohse/not-so-rancid

Copyright 2017, Leon M. Lohse
License: MIT (see LICENSE for details)
"""

import subprocess
import shlex
import argparse
import logging
import os.path
import configparser
import sys

__author__ = 'Leon M. Lohse'
__version__ = '0.1dev'
__license__ = 'MIT'

EXIT_FAILURE = 1
EXIT_SUCCESS = 0


logger = logging.getLogger('not-so-rancid')


def git_add_a(path):
    """ run `git add -A` with parameters """
    cmd = 'git -C {path} add -A'.format(path=path)
    logger.debug("Running `{}` ".format(cmd))
    args = shlex.split(cmd)
    proc = subprocess.run(args, stdout=subprocess.PIPE, check=True)


def git_push(path):
    """ run `git push` with parameters """
    cmd = 'git -C {path} push --porcelain'.format(path=path)
    logger.debug("Running `{}` ".format(cmd))
    args = shlex.split(cmd)
    proc = subprocess.run(args, stdout=subprocess.PIPE, check=True)


def git_diff(path):
    """ run `git diff --exit-code --cached` """
    cmd = 'git -C {path} diff --exit-code --cached'.format(path=path)
    logger.debug("Running `{}` ".format(cmd))
    args = shlex.split(cmd)
    proc = subprocess.run(args, stdout=subprocess.PIPE)

    if proc.returncode == 0:
        # no change
        return None

    if proc.returncode == 1:
        # muchas changas
        return proc.stdout


def git_commit(path):
    """ run `git commit` """
    cmd = 'git -C {path} commit -m"Configuration changes detected"'.format(path=path)
    logger.debug("Running `{}` ".format(cmd))
    args = shlex.split(cmd)
    proc = subprocess.run(args, stdout=subprocess.PIPE, check=True)

class Device():
    def __init__(self, name, username, address, command):
        self.name = name
        self.username = username
        self.address = address
        self.command = command
        self.process = None
        self.error = ""
        self.success = False

def parse_devices(devices_file):
    logger.info('Reading devices file {}'.format(devices_file))
    devices_config = configparser.ConfigParser()
    try:
        with open(devices_file) as f:
            devices_config.read_file(f, source=devices_file)
    except OSError as e:
        logger.error(e.strerror)
        sys.exit(1)

    device_names = devices_config.sections()
    logger.debug('Number of configured devices: {}'.format(len(device_names)))

    devices = []
    for d in device_names:
        d_conf = devices_config[d]
        device = Device(d, d_conf['username'], d_conf.get('address', fallback=d), d_conf['command'])
        devices.append(device)

    return devices


def fetch(devices, path):
    """ fetch all devices """

    for device in devices:
        lpath = os.path.join(path, device.name)
        cmd = device.command.format(user=device.username,
                                       address=device.address,
                                       lpath=lpath)
        logger.debug("Running `{}` ".format(cmd))
        args = shlex.split(cmd)
        p = subprocess.Popen(args, stderr=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)
        device.process = p

    logger.debug("Waiting for processes to finish")
    for device in devices:
        p = device.process
        assert isinstance(p, subprocess.Popen)
        outs, errs = p.communicate()
        if p.returncode == 0:
            device.success = True
        else:
            device.success = False
            device.error = errs
            logger.error("Failed to get config from {}".format(device.name))
            logger.error(errs)

    return devices

def run(devices, path):
    res_devices = fetch(devices, path)

    failures = []
    for d in res_devices:
       if not d.success:
           failures.append(d)

    if len(failures) > 0:
        logger.error("Failed to fetch config from {}/{} devices".format(len(failures), len(res_devices)))

    # add new files
    git_add_a(path)

    changes = git_diff(path)

    if changes is not None:
        logger.info("Committing changes...")
        git_commit(path)
        git_push(path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Backup network configuration')
    parser.add_argument('--devices-file', '-d', dest='devicesfile', default='/etc/not-so-rancid/devices.ini')
    parser.add_argument('--base', '-b', dest='basedir', default='/var/opt/not-so-rancid/')
    parser.add_argument('--debug', '-D', dest='debug', action='store_true')
    parser.add_argument('--cron', '-C', dest='cron', action='store_true')

    args = parser.parse_args()

    # configure logger
    handler = logging.StreamHandler(sys.stdout)
    logger.setLevel(logging.DEBUG)
    handler.setLevel(logging.INFO)
    if args.cron:
        handler.setLevel(logging.WARNING)
    if args.debug:
        handler.setLevel(logging.DEBUG)
    logger.addHandler(handler)

    # some checks
    if not os.path.isdir(args.basedir):
        logger.error('`{}` is not an existing directory.'.format(args.basedir))
        sys.exit(EXIT_FAILURE)

    devices = parse_devices(args.devicesfile)

    run(devices, args.basedir)

    sys.exit(EXIT_SUCCESS)
