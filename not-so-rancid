#!/usr/env python3
"""

Homepage and documentation: https://github.com/llohse/not-so-rancid

Copyright 2017, Leon M. Lohse
License: MIT (see LICENSE for details)
"""

__author__ = 'Leon M. Lohse'
__version__ = '0.1dev'
__license__ = 'MIT'

import subprocess, shlex
import argparse
import logging
import os.path
import configparser

def read_config(filename):

  return config

def git_add_a(path):
  """ run `git add -A` """
  cmd = 'git -C {path} add -A'.format(path=path)
  logging.info("Running `{}` ".format(cmd))
  args = shlex.split(cmd)
  proc = subprocess.run(args, check=True)

def git_push(path):
  cmd = 'git -C {path} push'.format(path=path)
  logging.info("Running `{}` ".format(cmd))
  args = shlex.split(cmd)
  proc = subprocess.run(args, check=True)


def git_diff(path):
  """ run `git diff --exit-code --cached` """
  cmd = 'git -C {path} diff --exit-code --cached'.format(path=path)
  logging.info("Running `{}` ".format(cmd))
  args = shlex.split(cmd)
  proc = subprocess.run(args, stdout=subprocess.PIPE)

  if proc.returncode == 0:
    # no change
    logging.debug('No change')
    return None

  if proc.returncode == 1:
    # muchas changas
    logging.debug('Muchas changas')
    return proc.stdout


def git_commit(path):
  """ run `git commit` """
  cmd = 'git -C {path} commit -m"Configuration changes detected"'.format(path=path)
  logging.info("Running `{}` ".format(cmd))
  args = shlex.split(cmd)
  proc = subprocess.run(args, check=True)

  # TODO: error handling

def parse_devices(devices_file):
  logging.info('Reading devices file {}'.format(devices_file))
  devices_config = configparser.ConfigParser()
  with open(devices_file) as f:
    devices_config.read_file(f, source=devices_file)

  device_names = devices_config.sections()
  logging.debug('Devices configured: {}'.format(len(device_names)))

  devices = []
  for d in device_names:
    d_conf = devices_config[d]
    device = { 'name' : d,
               'username' : d_conf['username'],
               'address' : d_conf.get('address', fallback=d),
               'retries' : d_conf['retries'],
               'command' : d_conf['command'],
               'success' : False }

    devices.append(device)

  return devices

def run(devices, path):

  # fetch all devices
  # TODO: make async
  for device in devices:
    lpath = os.path.join(path, device['name'])
    cmd = device['command'].format(user=device['username'],
                                   address=device['address'],
                                   lpath=lpath)
    logging.debug("Running `{}` ".format(cmd))
    args = shlex.split(cmd)
    try:
      proc = subprocess.run(args, stderr=subprocess.PIPE, stdout=subprocess.PIPE, check=True)
      device['success'] = True
    except subprocess.CalledProcessError as err:
      logging.warning(err.stderr.decode())

    # TODO retry
  

  # add new files
  git_add_a(path)

  changes = git_diff(path)

  if changes != None:
    logging.info("Commiting changes...")
    git_commit(path)
    git_push(path)

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Backup network configuration')
  parser.add_argument('--configuration-file', '-c', dest='configfile', default='/etc/not-so-rancid.conf')

  logging.basicConfig(level=logging.DEBUG)

  args = parser.parse_args()

  # TODO: error handling
  logging.info('Reading config file {}'.format(args.configfile))
  config = configparser.ConfigParser()
  with open(args.configfile) as f:
    config.read_file(f, source=args.configfile)

  devices_file = config['global']['devices']
  basedir = config['global']['basedir']

  devices = parse_devices(devices_file)

  run(devices, basedir)
